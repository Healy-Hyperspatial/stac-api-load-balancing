version: '3.8'
services:
  # stac-api-load-balancing:
  #   container_name: stac-api-load-balancing
  #   image: stac-api-load-balancing
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command:
  #     bash -c "stac-api-load-balancing --help"
    # volumes:
    #   - ./log-files:/app

  app-pgstac:
    container_name: stac-fastapi-pgstac
    image: stac-utils/stac-fastapi
    restart: always
    build:
      context: .
      dockerfile: backends/Dockerfile.pgstac
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8082
      - RELOAD=true
      - ENVIRONMENT=local
      - POSTGRES_USER=username
      - POSTGRES_PASS=password
      - POSTGRES_DBNAME=postgis
      - POSTGRES_HOST_READER=pgstac
      - POSTGRES_HOST_WRITER=pgstac
      - POSTGRES_PORT=5432
      - WEB_CONCURRENCY=10
      - VSI_CACHE=TRUE
      - GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES
      - GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR
      - DB_MIN_CONN_SIZE=1
      - DB_MAX_CONN_SIZE=1
    ports:
      - "8083:8082"
    volumes:
      - ./scripts:/app/scripts
    depends_on:
      - pgstac
    command:
      bash -c "python -m stac_fastapi.pgstac.app"

  pgstac:
    container_name: pgstac
    image: ghcr.io/stac-utils/pgstac:v0.7.10
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgis
      - PGUSER=username
      - PGPASSWORD=password
      - PGHOST=localhost
      - PGDATABASE=postgis
    ports:
      - "5439:5432"
    command: postgres -N 500

  app-elasticsearch:
    container_name: stac-fastapi-es
    image: stac-utils/stac-fastapi-es
    restart: always
    build:
      context: .
      dockerfile: backends/Dockerfile.elasticsearch
    platform: linux/amd64
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
      - RELOAD=true
      - ENVIRONMENT=local
      - WEB_CONCURRENCY=10
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - ES_USE_SSL=false
      - ES_VERIFY_CERTS=false
      - BACKEND=elasticsearch
    ports:
      - "8084:8080"
    volumes:
      - ./scripts:/app/scripts
    depends_on:
      - elasticsearch
    command:
      bash -c "python -m stac_fastapi.elasticsearch.app"

  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-8.11.0}
    hostname: elasticsearch
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx1g
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/snapshots:/usr/share/elasticsearch/snapshots
    ports:
      - "9200:9200"

  app-opensearch:
    container_name: stac-fastapi-os
    image: stac-utils/stac-fastapi-os
    restart: always
    build:
      context: .
      dockerfile: backends/Dockerfile.opensearch
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8082
      - RELOAD=true
      - ENVIRONMENT=local
      - WEB_CONCURRENCY=10
      - ES_HOST=opensearch
      - ES_PORT=9202
      - ES_USE_SSL=false
      - ES_VERIFY_CERTS=false
      - BACKEND=opensearch
    ports:
      - "8085:8082"
    volumes:
      - ./scripts:/app/scripts
    depends_on:
      - opensearch
    command:
      bash -c "python -m stac_fastapi.opensearch.app"

  opensearch:
    container_name: os-container
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION:-2.11.1}
    hostname: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - ./opensearch/config/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./opensearch/snapshots:/usr/share/opensearch/snapshots
    ports:
      - "9202:9202"

  app-mongo:
    container_name: stac-fastapi-mongo
    image: stac-utils/stac-fastapi-mongo
    restart: always
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.dev.mongo
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8084
      - RELOAD=true
      - ENVIRONMENT=local
      - BACKEND=mongo
      - MONGO_DB=stac
      - MONGO_HOST=mongo
      - MONGO_USER=root
      - MONGO_PASS=example
      - MONGO_PORT=27017
    ports:
      - "8086:8084"
    volumes:
      - ./scripts:/app/scripts
    depends_on:
      - mongo
    command:
      bash -c "./scripts/wait-for-it-es.sh mongo-container:27017 && python -m stac_fastapi.mongo.app"

  mongo:
    container_name: mongo-container
    image: mongo:7.0.5
    hostname: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - "27017:27017"
